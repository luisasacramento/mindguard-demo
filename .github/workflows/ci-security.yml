name: CI + DevSecOps pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.python.outcome }}
    steps:
      - uses: actions/checkout@v4

  semgrep:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - uses: actions/checkout@v4
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: ./ci/semgrep-rules  # pasta com regras custom
      - name: Upload semgrep report
        if: always()
        run: |
          mkdir -p reports
          semgrep --config ./ci/semgrep-rules --json > reports/semgrep-report.json
          cat reports/semgrep-report.json | jq '.summary'

  snyk:
    runs-on: ubuntu-latest
    needs: semgrep
    steps:
      - uses: actions/checkout@v4
      - name: Snyk test
        uses: snyk/actions/python@v2
        with:
          command: test
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  tests:
    runs-on: ubuntu-latest
    needs: snyk
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest requests
      - name: Run unit & security tests
        run: |
          pytest -q --disable-warnings --maxfail=1
      - name: Save pytest artifacts
        if: always()
        run: mkdir -p reports && pytest --json-report --json-report-file=reports/pytest.json || true

  sonar:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v1
        with:
          args: >
            -Dsonar.projectKey=mindguard-demo
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  zap:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4
      - name: Start app (background)
        run: |
          docker run -d --name mindguard-svc -p 8000:8000 ghcr.io/luisasacramento/mindguard-demo:latest || true
          # se voce usa start.sh, ajuste aqui para iniciar a app em modo staging
      - name: OWASP ZAP baseline scan
        uses: zaproxy/action-baseline@v0.5.0
        with:
          target: 'http://localhost:8000'
          rules_file_name: ci/zap-ignore.conf
      - name: Upload zap report
        if: always()
        run: |
          echo "zap run finished" 
